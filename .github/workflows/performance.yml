name: Health & Performance Check

on:
  schedule:
    - cron: '*/30 * * * *'  # Runs every 30 minutes
  workflow_dispatch:       # Allow manual run from GitHub

jobs:
  healthcheck:
    runs-on: ubuntu-latest

    env:
      BACKEND_HEALTH_URL: https://yourdomain.com/api/health
      FRONTEND_URL: https://yourdomain.com
      HEALTH_TOKEN: ${{ secrets.HEALTH_TOKEN }}

    steps:
      - name: üîÑ Check Backend Health
        run: |
          echo "Checking Backend Health..."
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "X-HEALTH-CHECK-TOKEN: $HEALTH_TOKEN" \
            $BACKEND_HEALTH_URL)
          echo "Status Code: $RESPONSE"
          if [[ "$RESPONSE" != "200" ]]; then
            echo "‚ùå Backend is unhealthy!"
            exit 1
          fi
          echo "‚úÖ Backend is healthy."

      - name: üåê Check Frontend Availability
        run: |
          echo "Checking Frontend..."
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $FRONTEND_URL)
          echo "Status Code: $RESPONSE"
          if [[ "$RESPONSE" != "200" ]]; then
            echo "‚ùå Frontend is down!"
            exit 1
          fi
          echo "‚úÖ Frontend is up."

      - name: üß™ Test DB Connectivity via Laravel Route
        run: |
          echo "Checking DB via Laravel..."
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "X-HEALTH-CHECK-TOKEN: $HEALTH_TOKEN" \
            https://yourdomain.com/api/health/db)
          echo "Status Code: $RESPONSE"
          if [[ "$RESPONSE" != "200" ]]; then
            echo "‚ùå DB Connectivity failed!"
            exit 1
          fi
          echo "‚úÖ DB is connected."

      - name: ‚ö° Simple Backend Performance Test
        run: |
          echo "Testing Backend Response Time..."
          TIME=$(curl -o /dev/null -s -w 'Total Time: %{time_total}s\n' \
            -H "X-HEALTH-CHECK-TOKEN: $HEALTH_TOKEN" \
            $BACKEND_HEALTH_URL)
          echo $TIME
