name: E2E Test & Health Check (Local CI)

on:
  workflow_dispatch:
  push:
    branches:
      - testing

jobs:
  test_and_health:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_DATABASE: test_db
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=3

    steps:
      - name: üì¶ Checkout Code
        uses: actions/checkout@v3

      - name: ‚öôÔ∏è Setup Node.js for Angular
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: ‚öôÔ∏è Setup PHP for Laravel
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, pdo, pdo_mysql, tokenizer, xml, ctype, json, bcmath

      - name: üåê Setup MySQL CLI
        run: sudo apt-get install -y mysql-client

      - name: üß± Setup Laravel Backend
        working-directory: ./backend
        run: |
          cp .env.example .env || true
          composer install
          php artisan config:clear
          php artisan cache:clear
          php artisan migrate --force

      - name: üöÄ Serve Laravel API (background)
        working-directory: ./backend
        run: |
          php artisan serve --host=127.0.0.1 --port=8000 &
          sleep 10

      - name: üß± Setup Angular Frontend
        working-directory: ./frontend
        run: |
          npm install
          npm run build

      - name: üöÄ Serve Angular Frontend (background)
        working-directory: ./frontend/dist
        run: |
          npx http-server -p 4200 &
          sleep 5

      - name: ‚úÖ Run Health Check via Login
        run: |
          echo "Checking login endpoint..."
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://127.0.0.1:8000/api/auth/login \
            -H "Content-Type: application/json" \
            -d '{"email": "${{ secrets.TESTING_KEY }}", "password": "${{ secrets.TESTING_PASS }}"}')

          echo "Status Code: $RESPONSE"
          if [[ "$RESPONSE" != "200" ]]; then
            echo "‚ùå Login failed or backend down!"
            exit 1
          fi
          echo "‚úÖ Login succeeded. Backend is healthy."

      - name: üåç Check Angular Frontend Availability
        run: |
          echo "Checking frontend..."
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:4200)
          echo "Status Code: $RESPONSE"
          if [[ "$RESPONSE" != "200" ]]; then
            echo "‚ùå Frontend is not responding!"
            exit 1
          fi
          echo "‚úÖ Frontend is running locally."

      - name: üîÅ Simple Performance Timing
        run: |
          TIME=$(curl -o /dev/null -s -w 'Total Time: %{time_total}s\n' \
            -X POST http://127.0.0.1:8000/api/auth/login \
            -H "Content-Type: application/json" \
            -d '{"email": "${{ secrets.TESTING_KEY }}", "password": "${{ secrets.TESTING_PASS }}"}')
          echo $TIME
